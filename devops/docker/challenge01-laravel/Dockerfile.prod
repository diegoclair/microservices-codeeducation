FROM php:7.3.6-fpm-alpine3.9 as builder

RUN apk add --no-cache openssl bash mysql-client npm nodejs
RUN docker-php-ext-install pdo pdo_mysql

RUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

WORKDIR /var/www
RUN rm -rf /var/www/html
RUN ln -s public html

COPY . /var/www
RUN chmod 777 -R /var/www/storage
RUN cp ./.docker/app/.env-example ./.docker/app/.env && \
    cp .env-example .env

RUN composer install \
    && php artisan key:generate \
    && php artisan config:cache

RUN npm install 

# Working like that, our image will be lighter, because here we dont have npm, composer, etc.
# we have only the files that we copy from builder
FROM php:7.3.6-fpm-alpine3.9
RUN apk add --no-cache mysql-client
RUN docker-php-ext-install pdo pdo_mysql

WORKDIR /var/www
RUN rm -rf /var/www/html

COPY --from=builder /var/www .

EXPOSE 9000

#entrypoint is the command that run when the container is up
#but the entrypoint needs to keep the container up, otherwise the container will down
ENTRYPOINT ["php-fpm"]
